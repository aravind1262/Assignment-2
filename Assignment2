include <stdio.h>

int main() {
    int weights[5];
    int total_weight = 0;

    printf("Enter the weights of the 5 treasures:\n");

    for (int i = 0; i < 5; i++) {
        printf("Treasure %d: ", i + 1);
        scanf("%d", &weights[i]);
    }

    for (int i = 0; i < 5; i++) {
        total_weight += weights[i];
    }

    printf("\nTotal weight collected: %d\n", total_weight);

    return 0;
}

#include <stdio.h>

struct Student {
    int reg_no;
    char name[50];
    int age;
    float cgpa;
};

int main() {
    struct Student students[5];
    int i, max_index = 0;

    for (i = 0; i < 5; i++) {
        printf("Enter details for student %d:\n", i + 1);
        printf("Register Number: ");
        scanf("%d", &students[i].reg_no);
        printf("Name: ");
        scanf(" %[^\n]", students[i].name);
        printf("Age: ");
        scanf("%d", &students[i].age);
        printf("CGPA: ");
        scanf("%f", &students[i].cgpa);
        printf("\n");
    }

    for (i = 1; i < 5; i++) {
        if (students[i].cgpa > students[max_index].cgpa) {
            max_index = i;
        }
    }

    printf("Student with the greatest CGPA:\n");
    printf("Register Number: %d\n", students[max_index].reg_no);
    printf("Name: %s\n", students[max_index].name);
    printf("Age: %d\n", students[max_index].age);
    printf("CGPA: %.2f\n", students[max_index].cgpa);

    return 0;
}


#include <stdio.h>
#include <stdlib.h>

int main() {
    int *inventory;
    int current_size = 10;
    int new_size;
    int i;

    inventory = (int*) malloc(current_size * sizeof(int));

    if (inventory == NULL) {
        printf("Memory allocation failed!\n");
        return 1;
    }

    for (i = 0; i < current_size; i++) {
        inventory[i] = i + 1;
    }

    printf("Initial inventory:\n");
    for (i = 0; i < current_size; i++) {
        printf("Packet %d: %d\n", i+1, inventory[i]);
    }

    printf("\nEnter new inventory size (greater than %d): ", current_size);
    scanf("%d", &new_size);

    if (new_size > current_size) {
        inventory = (int*) realloc(inventory, new_size * sizeof(int));
        if (inventory == NULL) {
            printf("Memory reallocation failed!\n");
            return 1;
        }

        for (i = current_size; i < new_size; i++) {
            inventory[i] = i + 1;
        }

        current_size = new_size;
    }

    printf("\nExpanded inventory:\n");
    for (i = 0; i < current_size; i++) {
        printf("Packet %d: %d\n", i+1, inventory[i]);
    }

    printf("\nEnter new inventory size (less than %d): ", current_size);
    scanf("%d", &new_size);

    if (new_size < current_size) {
        inventory = (int*) realloc(inventory, new_size * sizeof(int));
        if (inventory == NULL) {
            printf("Memory reallocation failed!\n");
            return 1;
        }

        current_size = new_size;
    }

    printf("\nShrunk inventory:\n");
    for (i = 0; i < current_size; i++) {
        printf("Packet %d: %d\n", i+1, inventory[i]);
    }

    free(inventory);

    return 0;
}


#include <stdio.h>
#include <string.h>

#define MAX_STUDENTS 100
#define MAX_NAME_LENGTH 50

int main() {
    char students[MAX_STUDENTS][MAX_NAME_LENGTH];
    int student_count = 0;
    char name[MAX_NAME_LENGTH];
    char choice;

    while (1) {
        if (student_count >= MAX_STUDENTS) {
            printf("The list is full. No more students can be added.\n");
            break;
        }

        printf("Enter the student's name: ");
        scanf(" %[^\n]", name);

        strcpy(students[student_count], name);
        student_count++;

        printf("Do you want to add another student? (y/n): ");
        scanf(" %c", &choice);

        if (choice == 'n' || choice == 'N') {
            break;
        }
    }

    printf("\nList of students who have submitted their assignments:\n");
    for (int i = 0; i < student_count; i++) {
        printf("%d. %s\n", i + 1, students[i]);
    }

    return 0;
}

#include <stdio.h>
#include <stdbool.h>

bool isPrime(int num) {
    if (num < 2) {
        return false;
    }
    for (int i = 2; i * i <= num; i++) {
        if (num % i == 0) {
            return false;
        }
    }
    return true;
}

int main() {
    int n;
    int count = 0;

    printf("Enter a number: ");
    scanf("%d", &n);

    if (n < 0) {
        n = -n;
    }

    int previous_digit = -1;

    while (n > 9) {
        int last_two_digits = n % 100;
        if (isPrime(last_two_digits)) {
            count++;
        }
        n /= 10;
    }

    printf("Number of two-digit prime numbers: %d\n", count);

    return 0;
}


#include <stdio.h>

#define MAX_BOOKS 100

int binarySearch(int arr[], int size, int target) {
    int left = 0;
    int right = size - 1;

    while (left <= right) {
        int mid = left + (right - left) / 2;

        if (arr[mid] == target) {
            return mid;
        }

        if (arr[mid] < target) {
            left = mid + 1;
        } else {
            right = mid - 1;
        }
    }

    return -1;
}

int main() {
    int book_ids[MAX_BOOKS];
    int n, target, result;

    printf("Enter the number of books: ");
    scanf("%d", &n);

    printf("Enter the book IDs in ascending order:\n");
    for (int i = 0; i < n; i++) {
        printf("Book ID %d: ", i + 1);
        scanf("%d", &book_ids[i]);
    }

    printf("Enter the book ID to search: ");
    scanf("%d", &target);

    result = binarySearch(book_ids, n, target);

    if (result != -1) {
        printf("Book ID %d is available in the library.\n", target);
    } else {
        printf("Book ID %d is not available in the library.\n", target);
    }

    return 0;
}

#include <stdio.h>

#define MAX 100

int main() {
    int matrix1[MAX][MAX], matrix2[MAX][MAX], result[MAX][MAX];
    int rows, cols;

    printf("Enter the number of rows: ");
    scanf("%d", &rows);
    printf("Enter the number of columns: ");
    scanf("%d", &cols);

    printf("\nEnter elements for the first matrix:\n");
    for (int i = 0; i < rows; i++) {
        for (int j = 0; j < cols; j++) {
            printf("Element [%d][%d]: ", i + 1, j + 1);
            scanf("%d", &matrix1[i][j]);
        }
    }

    printf("\nEnter elements for the second matrix:\n");
    for (int i = 0; i < rows; i++) {
        for (int j = 0; j < cols; j++) {
            printf("Element [%d][%d]: ", i + 1, j + 1);
            scanf("%d", &matrix2[i][j]);
        }
    }

    for (int i = 0; i < rows; i++) {
        for (int j = 0; j < cols; j++) {
            result[i][j] = matrix1[i][j] + matrix2[i][j];
        }
    }

    printf("\nResultant Matrix after addition:\n");
    for (int i = 0; i < rows; i++) {
        for (int j = 0; j < cols; j++) {
            printf("%d ", result[i][j]);
        }
        printf("\n");
    }

    return 0;
}

